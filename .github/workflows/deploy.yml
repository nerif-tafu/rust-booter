name: Deploy Rust Booter

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if any)
      run: npm test --if-present
      
    - name: Lint code
      run: npm run lint --if-present

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --production
      
    - name: Stop existing application
      run: |
        # Stop the systemd service
        sudo systemctl stop rust-booter || true
        
    - name: Deploy application
      run: |
        # Create deployment directory if it doesn't exist
        sudo mkdir -p /opt/rust-booter
        
        # Copy built files
        sudo cp -r public /opt/rust-booter/
        sudo cp server.js /opt/rust-booter/
        sudo cp package.json /opt/rust-booter/
        sudo cp package-lock.json /opt/rust-booter/ 2>/dev/null || true
        
        # Set proper ownership
        sudo chown -R $USER:$USER /opt/rust-booter
        
        # Install production dependencies
        cd /opt/rust-booter
        npm ci --production
        
    - name: Create systemd service file
      run: |
        sudo tee /etc/systemd/system/rust-booter.service > /dev/null <<EOF
        [Unit]
        Description=Rust Booter - WOL Gaming PC Controller
        After=network.target
        
        [Service]
        Type=simple
        User=$USER
        WorkingDirectory=/opt/rust-booter
        ExecStart=/usr/bin/node server.js
        Restart=always
        RestartSec=10
        Environment=NODE_ENV=production
        Environment=PORT=8534
        
        [Install]
        WantedBy=multi-user.target
        EOF
        
    - name: Start application with systemd
      run: |
        # Reload systemd and start the service
        sudo systemctl daemon-reload
        sudo systemctl enable rust-booter
        sudo systemctl start rust-booter
        
    - name: Verify deployment
      run: |
        # Wait a moment for the application to start
        sleep 5
        
        # Check if the service is running
        sudo systemctl status rust-booter --no-pager
        
        # Optional: Health check
        curl -f http://localhost:8534/api/config || echo "Health check failed - application may still be starting"
